(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-dom'), require('@fidanjs/runtime')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-dom', '@fidanjs/runtime'], factory) :
  (factory((global.integrationReact = {}),global.react,global.ReactDOM,global.runtime));
}(this, (function (exports,React,ReactDOM,runtime) {
  var reactToDom = function (Tag, attributes) {
    var childs = [], len = arguments.length - 2;
    while ( len-- > 0 ) childs[ len ] = arguments[ len + 2 ];

    var parent = document.createElement("template");
    var RenderWrapper = /*@__PURE__*/(function (superclass) {
      function RenderWrapper(props) {
        superclass.call(this, props);
        this.state = {};
        this.dynamics = [];

        for (var key in props) {
          if (typeof props[key] === "function" && props[key].hasOwnProperty("$val")) {
            this.dynamics.push(props[key]);
            this.state[key] = props[key]();
          } else { this.state[key] = props[key]; }
        }
      }

      if ( superclass ) RenderWrapper.__proto__ = superclass;
      RenderWrapper.prototype = Object.create( superclass && superclass.prototype );
      RenderWrapper.prototype.constructor = RenderWrapper;

      RenderWrapper.prototype.componentDidMount = function componentDidMount () {
        var this$1 = this;

        var props = this.props;
        runtime.compute(function () {
          var newState = {};

          for (var key in this$1.props) {
            if (typeof props[key] === "function" && props[key].hasOwnProperty("$val")) {
              newState[key] = props[key]();
            }
          }

          this$1.setState(newState);
        }, this.dynamics);
      };

      RenderWrapper.prototype.render = function render () {
        return React.createElement.apply(React, [ Tag, this.state ].concat( childs ));
      };

      return RenderWrapper;
    }(React.Component));
    ReactDOM.render(React.createElement(RenderWrapper, attributes), parent);
    return parent.firstElementChild;
  };
  var domToReact = function (dom) {
    var integrationDomRef = function (element) {
      if (element) {
        element.replaceWith(dom.cloneNode(true));
      }
    };

    return React.createElement(React.Fragment, {}, React.createElement("template", {
      ref: integrationDomRef
    }));
  };

  exports.reactToDom = reactToDom;
  exports.domToReact = domToReact;

})));
//# sourceMappingURL=index.umd.js.map
